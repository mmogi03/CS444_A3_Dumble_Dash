build_ui:
  description: >
    Based on the game concept and scenes provided:

    {crew1_output}

    and Based on the template coming from:

    {template}

    Use these game assets for images, icons, or references:

    {asset_map}

    Build the entire game user interface using web technologies. This includes menus, buttons, HUDs, and in-game overlays. Focus on usability, aesthetic consistency, and layout responsiveness.

  expected_output: >
    - JavaScript and HTML code for UI components
    - Build UI componenets for mobile application
    - Clearly labeled functions or modules
    - Include brief comments explaining layout and interaction logic

develop_gameplay_logic:
  description: >
    Develop the gameplay logic based on the mechanics described in the following game concept:

    {crew1_output}

    and Based on the coming from:

    {template}

    Here are the game assets (images/audio) to use during gameplay:

    {asset_map}

    Implement the turn-based card combat, energy system, progression, and level-specific interactions. Ensure modularity and clarity in how the game loop and player choices are handled.

  expected_output: >
    - JavaScript functions/classes for card usage, turns, and enemy actions
    - Modular structure that supports additional cards and abilities
    - One short example simulating a full combat round

add_audio:
  description: >
    Integrate the following audio tracks into the game:

    {crew2_output}

    and Based on the template coming from:

    {template}

    Use these file paths to access the correct music files:

    {asset_map}

    Assign each track to a relevant scene or moment in the gameplay. Include code for volume control, loop handling, and playback triggers within scenes.

  expected_output: >
    - JavaScript code for loading and playing audio assets
    - Commented triggers that explain which track plays when
    - Support for background loops and event-based audio

construct_scenes:
  description: >
    Construct full game scenes using elements from the Game Concept Document:

    {crew1_output}

    and Based on the template coming from:

    {template}

    Use the following visual and audio assets during scene construction:

    {asset_map}

    Scenes should include layout logic, environment features (e.g., traps, hazards), and scene transitions. Incorporate previous UI and gameplay logic as needed.

  expected_output: >
    - Scene layout and rendering logic in JavaScript
    - Integration points for gameplay and UI modules
    - Clear visual transitions or trigger markers in code

  context: [build_ui, develop_gameplay_logic, add_audio]

export_game_code:
  description: >
    Finalize and export the complete game into a ready-to-run JavaScript bundle.

    Based on the template coming from:
      {template}
      
    These assets should be embedded properly:

    {asset_map}

    Ensure all components (UI, logic, scenes, audio) are properly connected and can run as a standalone game.

  expected_output: >
    - A single deployable JavaScript bundle
    - Directory structure showing assets and modules
    - Confirmation that game runs independently in a browser

  context: [build_ui, develop_gameplay_logic, add_audio, construct_scenes]

generate_index_html:
  description: >
    Based on the template coming from:
      {template}

    These asset paths can be used for audio/image tags:

    {asset_map}

    Write the `index.html` file that will serve as the game’s entry point. It should load `main.js` and apply styles from `style.css`.

  expected_output: >
    A valid, responsive HTML file linked to the appropriate game files (including the mobile D-pad markup) and ready for deployment.

generate_style_css:
  description: >
    Based on the template coming from:

    {template}

    These visual assets (e.g. background texture) should be referenced where appropriate:

    {asset_map}

    Create the base `style.css` file that defines layout and visual styling for the game’s menus and screens.

  expected_output: >
    A full `style.css` file with layout, font, and color definitions for the game’s user interface, including media-queries and grid/CSS-flex rules for the diamond-shaped on-screen D-pad.

generate_game_entry_point:
  description: >
   Based on the template coming from:

    {template}

    Use this asset mapping to load and initialize visuals/audio:

    {asset_map}

    Create a `main.js` file that imports and initializes all game modules (UI, logic, audio, scenes).

  expected_output: >
    A valid `main.js` file that bootstraps the game from the browser.

  context: [build_ui, develop_gameplay_logic, add_audio, construct_scenes]

bundle_and_export_game:
  description: >
    Based on the template coming from:

    {template}

    Use this list of asset files for packaging:

    {asset_map}

    Package all game files (HTML, CSS, JS, assets) using a tool like Webpack or Parcel. Output a bundled directory with everything in place and ready to be zipped.

  expected_output: >
    A structured, complete directory ready to be deployed in the browser. Should include `index.html`, `style.css`, `bundle.js`, and an `assets/` folder. 
    
    Make it so that mobile buttons are only displayed in portrait mode with a 597 width and 900 height aspect ratio or smaller. 

  context: [generate_game_entry_point, generate_index_html, generate_style_css]

check_integrated_code:
  description: >
    Review the entire game codebase including the UI, logic, scenes, and audio systems.

    Confirm all assets load correctly based on this mapping:

    {asset_map}

    Confirm that all modules connect and operate correctly when run in a browser environment. Check for DOM issues, missing assets, broken styles, or runtime JavaScript errors.

  expected_output: >
    - A fully working integration of HTML, CSS, and JavaScript
    - Bug-free interactions between components
    - Final confirmation of correct scene transitions and game loop operation

  context: [build_ui, develop_gameplay_logic, add_audio, construct_scenes, generate_game_entry_point]

dg_generate_game_entry_point:
  description: >
    Perform a code-level review of the generated `main.js` entry point.

    Ensure that module imports are valid, initialization order is correct, and the game can start from this file in a browser.

     Here is the asset mapping to verify file paths:

     {asset_map}

  expected_output: >
    - Correct import paths and usage for all modules
    - Verified bootstrap logic and DOM hooks
    - No JavaScript runtime errors

  context: [generate_game_entry_point]

dg_generate_style_css:
  description: >
    Review the generated `style.css` file.

    Validate layout structure, color and typography rules, responsiveness, and visual consistency across game states.

    Visual references (e.g. background textures) are in:

    {asset_map}

  expected_output: >
    - Verified CSS class usage and selectors
    - Consistent, responsive design
    - No invalid or redundant style declarations

  context: [generate_style_css]

dg_generate_index_html:
  description: >
    Review the generated `index.html` file.

    Confirm correct structure, valid HTML syntax, and proper linking to JavaScript and CSS resources.

    Make sure all images and audio tags link to files from:

    {asset_map}

  expected_output: >
    - Valid and semantic HTML
    - Confirmed `main.js` and `style.css` integration
    - Proper structure for game container and canvas/display area

  context: [generate_index_html]

dg_construct_scenes:
  description: >
    Review JavaScript code responsible for scene construction and transitions.

    Validate rendering logic, scene-switching mechanics, and layout integration with UI and gameplay components.

    All referenced assets should align with:

    {asset_map}

  expected_output: >
    - Verified scene layout logic
    - Functional transitions between scenes
    - Integration with gameplay and UI modules

  context: [construct_scenes]

dg_add_audio:
  description: >
    Review the integrated audio logic.

    Ensure all tracks load correctly, playback triggers match gameplay events, and audio behaves as expected across scenes.

    Confirm file paths and asset usage from:

    {asset_map}

  expected_output: >
    - Working background loops and sound effects
    - Verified playback triggers and volume control
    - No missing or broken audio references

  context: [add_audio]

dg_develop_gameplay_logic:
  description: >
    Review the gameplay logic system.

    Ensure that turn-based mechanics, card effects, and energy systems work as intended and that the logic is modular and extensible.

    Asset files (e.g. card visuals or sounds) used in gameplay are listed in:

    {asset_map}

  expected_output: >
    - Verified turn order and player actions
    - Working card behavior and enemy logic
    - No logic bugs or flow issues in combat loops

  context: [develop_gameplay_logic]

dg_build_ui:
  description: >
    Review the game’s UI implementation.

    Validate interactivity, layout behavior, button states, and visual responsiveness. Check that all UI elements are functional and connected to game logic.

    Confirm that icons, textures, and images align with this asset map:

    {asset_map}

  expected_output: >
    - Verified UI components in HTML/JavaScript
    - Responsive layout and working inputs
    - Include responsive on-screen D-pad controls for small/mobile viewports
    - Functional integration with gameplay and scenes

  context: [build_ui]