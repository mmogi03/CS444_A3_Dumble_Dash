design_story:
  description: >
    Based on the following game concept from Crew1:
    {crew1_output}

    Design an overarching storyline for this game. It should be rich, full of twists, and consistent with the gameplay mechanics. Define the protagonist and how they progress through the game's levels, with a distinct theme.

  expected_output: >
    A story document that includes:
     - Game Title
     - Protagonist's name and background
     - A detailed storyline (intro, journey, climax)
     - Suggestions for visuals, music, and sound effects needed to match the game's theme
  return_output: true

  expected_output: >
    A story document that includes:
     - Protagonist's name and background
     - A detailed storyline (intro, journey, climax)
     - Suggestions for visuals and music and sound effects needed
  return_output: true

generate_card_attack_sound_1:
  description: >
    Using the game concept:
    {crew1_output}
    Generate a tag-style prompt (max 10 words) for the main character's first **card attack** sound effect.
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The tool call in the format: generate_game_audio("...")
    - A short rationale for the chosen tags
  context: [design_story]
  return_output: true

generate_card_attack_sound_2:
  description: >
    Using the game concept:
    {crew1_output}
    Generate a tag-style prompt (max 10 words) for the main character's second **card attack** sound effect.
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The tool call in the format: generate_game_audio("...")
    - A brief rationale for the tag choice
  context: [design_story]
  return_output: true

generate_heal_sound:
  description: >
    Based on the game concept:
    {crew1_output}
    Produce a tag-style prompt (max 10 words) for the main character's **heal card** sound effect.
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The exact tool call in the format: generate_game_audio("...")
    - A short explanation of your tag choice
  context: [design_story]
  return_output: true

generate_enemy_attack:
  description: >
    Using the game concept:
    {crew1_output}
    Develop a tag-style prompt (max 10 words) for an enemy attack sound effect.
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The tool call line in the required format: generate_game_audio("...")
    - A brief explanation of your tags
  context: [design_story]
  return_output: true

generate_background_music:
  description: >
    Based on the game concept:
    {crew1_output}
    Create a tag-style prompt (max 10 words) for immersive background music.
  expected_output: >
    - The prompt string (max 10 words, must include "music")
    - The tool call in the format: generate_game_audio("...")
    - A 1-line rationale for the chosen tags
  context: [design_story]
  return_output: true

generate_endgame_music:
  description: >
    Based on the game concept:
    {crew1_output}
    Generate a tag-style prompt (max 10 words) for the end game music sound.
  expected_output: >
    - The prompt string (max 10 words, must include "music")
    - The tool call in the format: generate_game_audio("...")
    - A brief explanation of your chosen words
  context: [design_story]
  return_output: true

generate_level_victory:
  description: >
    From the game concept:
    {crew1_output}
    Generate a tag-style prompt (max 10 words) for a level victory sound effect.
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The tool call in the required format: generate_game_audio("...")
    - A short rationale for your tag choice
  context: [design_story]
  return_output: true

generate_start_game_sound:
  description: >
    Based on the game concept:
    {crew1_output}
    Produce a tag-style prompt (max 10 words) for the start game audio cue (main menu sound).
  expected_output: >
    - The prompt string (max 10 words, must include "sound")
    - The exact tool call in the format: generate_game_audio("...")
    - A brief explanation for your chosen tags
  context: [design_story]
  return_output: true

generate_main_character_icon:
  description: >
    Based on the game concept and storyline:

    {crew1_output}

    Create a **descriptive visual prompt** for the main character icon.

    🎨 The description should include:
      - Key visual traits (appearance, attire, expression, pose)
      - A consistent "cartoon-ish" game style
      - Inspiration from the story and protagonist design

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "main_character",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be a short snake_case tag (e.g., "main_character")
    ✅ "image_url" must be the image URL returned by dalle_tool("...")

  context: [design_story]
  return_output: true

generate_enemy_icons:
  description: >
    Based on the game concept and storyline:

    {crew1_output}

    Generate one distinct visual prompt for a key enemy in the game.

    The enemy should have:
      - A unique visual identity
      - Descriptive features (form, color, aura, expression)
      - Fit the tone of the story and setting

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "enemy_icon",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ Use "enemy_icon" or a short descriptive name for "name"

  context: [design_story]
  return_output: true

generate_boss_music:
  description: >
    Based on the game concept:
    {crew1_output}

    Compose a tag-style prompt (max 10 words) to generate the boss fight music.
    This music should be intense, intimidating, suspenseful, and match the emotional theme of the game.

  expected_output: >
    - The prompt string (max 10 words, must include "music")
    - The tool call should be in the format: generate_game_audio("...")
    - A short explanation for the tags that were chosen

  context: [design_story]
  return_output: True

generate_boss_icon:
  description: >
    Based on the game concept:
    {crew1_output}

    Create a DALL-E prompt for the **main boss character** for the game.

    This should be:
    - Visually unique and imposing
    - Thematically aligned with the story and theme
    - Styled in a similar cartoon fantasy style

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "boss_icon",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be "boss_icon"
    ✅ "image_url" must be the image url from the dalle_tool

  context: [design_story]
  return_output: true

generate_environment_visuals:
  description: >
    Based on the story and concept:

    {crew1_output}

    Generate a DALL·E prompt for a **seamless, repeatable background texture** for the game wall or floor.

    ⚠️ Style Must Be:
      - Seamless/tileable
      - Cartoon fantasy
      - Neutral enough for multiple rooms or levels

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "environment_background",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be "environment_background"

  context: [design_story]
  return_output: true

generate_game_icon:
  description: >
    Generate a DALL·E prompt for a mobile game **app icon** for "Reef Escape".

    It should reflect:
      - Fantasy theme
      - Something simple and iconic (e.g., glowing sigil, deep gate, floating card)
      - Style: cartoon, clear contrast, mobile-friendly

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "game_icon",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be "game_icon"

  context: [design_story]
  return_output: true

generate_instructions_background:
  description: >
    Create a DALL·E prompt for a full-screen **instructions screen background** for "Reef Escape". 
    It should reflect the game's underwater fantasy theme and clearly display instructional framing in a cartoon style.
    Can simply be another pose for the mermaid in the game icon.
  expected_output: >
    Output a JSON string like this:
    {
      "name": "instructions_background",
      "image_url": "<returned dalle image url>"
    }

    ✅ Must be valid JSON  
    ✅ "name" must be "instructions_background"
  context: [design_story]
  return_output: true

generate_settings_background:
  description: >
    Create a DALL·E prompt for a full-screen **settings screen background** for "Reef Escape". 
    It should convey an immersive -reef control panel vibe in a consistent cartoon style.
    Can simply be another pose for the mermaid in the game icon.
  expected_output: >
    Output a JSON string like this:
    {
      "name": "settings_background",
      "image_url": "<returned dalle image url>"
    }

    ✅ Must be valid JSON  
    ✅ "name" must be "settings_background"
  context: [design_story]
  return_output: true

generate_card_image:
  description: >
    Based on the game concept and story:

    {crew1_output}

    🎴 Design a DALL·E prompt to illustrate a **key card** in the game.

    You may choose:
      - A attack card
      - A heal card
      - A character card

    The output image should:
      - Fit the story's style and setting
      - Use the cartoonish style requested
      - Be visually bold and recognizable at small sizes

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "card_attack",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be snake_case (e.g., "card_fire_trap")
    ✅ "image_url" must be the DALL·E image URL

  context: [design_story]
  return_output: true

generate_floor_texture:
  description: >
    Based on the game concept and story:

    {crew1_output}

    Generate a DALL·E prompt for a **seamless, tileable floor texture**.

    Style Guide:
    - Cartoon fantasy
    - Neutral but interesting
    - Should clearly contrast with wall textures
    - Should tile seamlessly across rooms or corridors

  expected_output: >
    Output a JSON string like this:
    {{
      "name": "floor_texture",
      "image_url": "<returned dalle image url>"
    }}

    ✅ Must be valid JSON
    ✅ "name" must be "floor_texture"

  context: [design_story]
  return_output: true

map_assets:
  description: >
    Using the outputs from all image and audio generation tasks, create a structured mapping of asset file paths to their intended purpose in the game.

    🧠 Each task returns the final **file path** of the generated asset (e.g., "outputs/main_character.png", "outputs/menu_music.mp3").

    📂 Your job:
    - Collect all task outputs from the context list
    - Use the file name (or the prompt name, if provided in prior output JSON) to determine what asset it is (e.g., "main_character", "enemy_icon", etc.)
    - Build a clean JSON-style dictionary of asset type ➜ path

    🎯 Format your final answer similar to this (file naming doesn't have to be exact & no markdown):
    {{
      "main_character_icon": "outputs/main_character.png",
      "enemy_icons": ["outputs/enemy_icon.png"],
      "environment_background": "outputs/environment_background.png",
      "card_image": "outputs/card_attack.png",
      "card_attack_sound_1": "outputs/card_attack_sound_1.ogg",
      "card_attack_sound_2": "outputs/card_attack_sound_2.ogg",
      "heal_sound": "outputs/heal_sound.ogg",
      "enemy_attack_sound": "outputs/enemy_attack_sound.ogg",
      "background_music": "outputs/background_music.ogg",
      "endgame_music": "outputs/endgame_music.ogg",
      "level_victory_sound": "outputs/level_victory_sound.ogg",
      "start_game_sound": "outputs/start_game_sound.ogg",
      "game_icon": "outputs/game_icon.png",
      "floor_texture": "outputs/floor_texture.ogg",
      "boss_music": "outputs/boss_music.ogg",
      "boss_icon": "outputs/boss_icon.png"
    }}

  expected_output: >
    Return a valid JSON object with:
    - Keys as asset types
    - Values as file paths (strings or string arrays)
    - DO NOT include any markdown characters (like ``` or extra formatting)

  output_file: outputs/asset_mapping.json

  context: [
    generate_main_character_icon,
    generate_enemy_icons,
    generate_environment_visuals,
    generate_game_icon,
    generate_card_attack_sound_1,
    generate_card_attack_sound_2,
    generate_heal_sound,
    generate_enemy_attack,
    generate_background_music,
    generate_endgame_music,
    generate_level_victory,
    generate_start_game_sound,
    generate_card_image,
    generate_floor_texture,
    generate_boss_music,
    generate_boss_icon
  ]

  return_output: true
