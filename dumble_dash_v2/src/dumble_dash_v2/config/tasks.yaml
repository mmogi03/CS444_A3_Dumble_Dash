theme_task:
  description: >
    Devise the setting, narrative, and stylistic elements for a rogue-like 2D maze exploration game featuring turn-based card battles.
  expected_output: >
    A structured description covering lore, artistic style, and narrative hooks.
  agent: theme_generation
  flow:
    next: game_logic_task

game_logic_task:
  description: >
    Generate detailed core mechanics for the rogue-like 2D maze and turn-based card battles, including movement systems, enemy behavior, progression, loot, and rules.
  expected_output: >
    A comprehensive set of mechanics explaining player exploration, encounters, and strategic card battles.
  agent: game_logic_generation
  flow:
    next: user_input_task

user_input_task:
  description: >
    Define how the player interacts with the game, including movement inputs, card selection, UI flow, and player feedback.
  expected_output: >
    A mapping of controls and input interactions.
  agent: user_input
  flow:
    next: code_integration_task

code_integration_task:
  description: >
    Merge the theme, game logic, and user input details into the following HTML template, inserting all necessary JavaScript for a Phaser-based rogue-like 2D maze with turn-based card battles.
    Here is the entire template that must be used (insert the integrated code in the <script> section or as needed):

    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport" />
        <title>Generated Game</title>
        <style>
          body, html {{
                margin: 0;
                padding: 0;
                height: 100%;
                font-family: 'Orbitron', sans-serif;
                background-color: #1a1a2e;
                color: #ffffff;
            }}
            .screen {{
                display: none;
                height: 100%;
                width: 100%;
                position: absolute;
                top: 0;
                left: 0;
                background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            }}
            .screen.active {{
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }}
            .container {{
                text-align: center;
                max-width: 600px;
                width: 90%;
            }}
            button {{
                background: linear-gradient(135deg, #283c86 0%, #45a247 100%);
                border: 2px solid #fff;
                border-radius: 8px;
                color: #fff;
                font-family: 'Orbitron', sans-serif;
                font-size: 18px;
                text-transform: uppercase;
                text-align: center;
                text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
                padding: 12px 30px;
                margin: 20px auto 0;
                display: block;
                width: 215.15px;
                cursor: pointer;
                transition: all 0.3s ease;
            }}
            button:hover {{
                background: linear-gradient(135deg, #45a247 0%, #283c86 100%);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            }}
            #game-title {{
                font-size: 2.5em;
                margin-bottom: 30px;
                text-transform: uppercase;
                text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                color: #e94560;
            }}
            #game-controls {{
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                background-color: rgba(26, 26, 46, 0.8);
                padding: 10px 0;
                z-index: 101;
                display: none;
                text-align: center;
            }}
            #game-controls button {{
                display: inline-block;
                width: auto;
                padding: 8px 15px;
                margin: 0 5px;
                font-size: 14px;
            }}
            #hud {{
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%;
                background-color: rgba(255, 255, 255, 0.9);
                color: #1a1a2e;
                padding: 10px;
                z-index: 100;
                display: none;
                font-family: 'Orbitron', sans-serif;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            }}
            #game-container {{
                position: relative;
                width: 100%;
                height: calc(100% - 100px);
                overflow: hidden;
                background-color: #0f3460;
                border: 2px solid #e94560;
                box-shadow: 0 0 20px rgba(233, 69, 96, 0.5);
            }}
            #game-screen {{
                background: none;
            }}
            #instructions-screen {{
                z-index: 200;
            }}
            #instructions-screen.overlay {{
                background: rgba(0, 0, 0, 0.8);
            }}
            #instructions-screen .container {{
                background: #1a1a2e;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 20px rgba(233, 69, 96, 0.5);
            }}
            @media (max-width: 600px) {{
                #game-title {{
                    font-size: 2em;
                }}
                button {{
                    width: 80%;
                    font-size: 16px;
                }}
                #game-controls button {{
                    font-size: 12px;
                    padding: 6px 12px;
                }}
            }}
        </style>
      </head>
      <body>
        <div id="game-controls">
            <button id="game-menu-button">Menu</button>
            <button id="game-restart-button">Restart</button>
            <button id="game-instructions-button">Instructions</button>
        </div>
        <div id="hud"></div>
        <div id="start-menu-screen" class="active screen">
            <div class="container">
                <h1 id="game-title">Your Game Title</h1>
                <button id="play-button">Play</button>
                <button id="settings-button">Settings</button>
                <button id="instructions-button">Instructions</button>
            </div>
        </div>
        <div id="settings-screen" class="screen">
            <div class="container">
                <h2>Settings</h2>
                <button id="settings-back-button">Back</button>
            </div>
        </div>
        <div id="instructions-screen" class="screen">
            <div class="container">
                <h2>Instructions</h2>
                <h3>How to Play:</h3>
                <ul>
                    <li>Instruction 1</li>
                    <li>Instruction 2</li>
                </ul>
                <h3>Controls:</h3>
                <ul>
                    <li>Control 1</li>
                    <li>Control 2</li>
                </ul>
                <button id="instructions-back-button">Back</button>
            </div>
        </div>
        <div id="game-screen" class="screen">
            <div id="game-container"></div>
        </div>
        <div id="game-over-screen" class="screen">
            <div class="container">
                <div id="game-over-message"></div>
                <button id="play-again-button">Play Again</button>
                <button id="main-menu-button">Main Menu</button>
            </div>
        </div>
        <audio autoplay="" id="background-music" loop="">
          <source src="background-music.mp3" type="audio/mpeg" />
        </audio>
        <audio id="start-game-sound">
          <source src="start-game-sound.mp3" type="audio/mpeg" />
        </audio>
        <script>
          document.addEventListener('DOMContentLoaded', () => {{
            // Insert final integrated game logic, UI, and input code here.
          }});
        </script>
      </body>
    </html>
  output_file: output/index.html
  expected_output: >
    A final integrated HTML file (named index.html) containing all required JavaScript in the <script> portion.
  agent: code_integration
  flow:
    next: ui_ux_task

ui_ux_task:
  description: >
    Use DALL-E to generate image assets. Generate a simple, futuristic interface background image for the game. Save the image explicitly in "output/assets/textures" and return the filename. Do not include any additional text.
  expected_output: >
    A list of generated image filenames placed into output/assets/textures.
  agent: ui_ux
  flow:
    next: testing_debug_task

testing_debug_task:
  description: >
    Test and debug the integrated code, identifying any errors, performance issues, or missing references. Propose fixes or adjustments.
  expected_output: >
    Final stable game code or a summary of fixes applied.
  agent: test_debug
  flow:
    next: manager_task

manager_task:
  description: >
    Review all previous outputs and confirm the final game is cohesive and production-ready. Mark the project complete.
  expected_output: >
    A final confirmation that the project is complete.
  agent: manager
