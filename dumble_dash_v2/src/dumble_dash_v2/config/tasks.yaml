generate_html:
  description: |
    Generate the index.html file using the following HTML template exactly as given and output it into the output folder:

    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport" />
        <title>Generated Game</title>
        <style>
          body, html {{
                margin: 0;
                padding: 0;
                height: 100%%;
                font-family: 'Orbitron', sans-serif;
                background-color: #1a1a2e;
                color: #ffffff;
            }}
            .screen {{
                display: none;
                height: 100%%;
                width: 100%%;
                position: absolute;
                top: 0;
                left: 0;
                background: linear-gradient(135deg, #1a1a2e 0%%, #16213e 50%%, #0f3460 100%%);
            }}
            .screen.active {{
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }}
            .container {{
                text-align: center;
                max-width: 600px;
                width: 90%%;
            }}
            button {{
                background: linear-gradient(135deg, #283c86 0%%, #45a247 100%%);
                border: 2px solid #fff;
                border-radius: 8px;
                color: #fff;
                font-family: 'Orbitron', sans-serif;
                font-size: 18px;
                text-transform: uppercase;
                text-align: center;
                text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
                padding: 12px 30px;
                margin: 20px auto 0;
                display: block;
                width: 215.15px;
                cursor: pointer;
                transition: all 0.3s ease;
            }}
            button:hover {{
                background: linear-gradient(135deg, #45a247 0%%, #283c86 100%%);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            }}
            #game-title {{
                font-size: 2.5em;
                margin-bottom: 30px;
                text-transform: uppercase;
                text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                color: #e94560;
            }}
            #game-controls {{
                position: fixed;
                top: 0;
                left: 0;
                width: 100%%;
                background-color: rgba(26, 26, 46, 0.8);
                padding: 10px 0;
                z-index: 101;
                display: none;
                text-align: center;
            }}
            #game-controls button {{
                display: inline-block;
                width: auto;
                padding: 8px 15px;
                margin: 0 5px;
                font-size: 14px;
            }}
            #hud {{
                position: fixed;
                top: 50px;
                left: 0;
                width: 100%%;
                background-color: rgba(255, 255, 255, 0.9);
                color: #1a1a2e;
                padding: 10px;
                z-index: 100;
                display: none;
                font-family: 'Orbitron', sans-serif;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            }}
            #game-container {{
                position: relative;
                width: 100%%;
                height: calc(100%% - 100px);
                overflow: hidden;
                background-color: #0f3460;
                border: 2px solid #e94560;
                box-shadow: 0 0 20px rgba(233, 69, 96, 0.5);
            }}
            #game-screen {{
                background: none;
            }}
            #instructions-screen {{
                z-index: 200;
            }}
            #instructions-screen.overlay {{
                background: rgba(0, 0, 0, 0.8);
            }}
            #instructions-screen .container {{
                background: #1a1a2e;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 20px rgba(233, 69, 96, 0.5);
            }}
            @media (max-width: 600px) {{
                #game-title {{
                    font-size: 2em;
                }}
                button {{
                    width: 80%%;
                    font-size: 16px;
                }}
                #game-controls button {{
                    font-size: 12px;
                    padding: 6px 12px;
                }}
            }}
        </style>
      </head>
      <body>
        <div id="game-controls">
            <button id="game-menu-button">Menu</button>
            <button id="game-restart-button">Restart</button>
            <button id="game-instructions-button">Instructions</button>
        </div>
        <div id="hud"></div>

        <div id="start-menu-screen" class="active screen">
            <div class="container">
                <h1 id="game-title">Your Game Title</h1>
                <button id="play-button">Play</button>
                <button id="settings-button">Settings</button>
                <button id="instructions-button">Instructions</button>
            </div>
        </div>

        <div id="settings-screen" class="screen">
            <div class="container">
                <h2>Settings</h2>
                <button id="settings-back-button">Back</button>
            </div>
        </div>

        <div id="instructions-screen" class="screen">
            <div class="container">
                <h2>Instructions</h2>
                <h3>How to Play:</h3>
                <ul>
                    <li>Use WASD to move the character.</li>
                    <li>Goal: Just move around for now.</li>
                </ul>
                <button id="instructions-back-button">Back</button>
            </div>
        </div>

        <div id="game-screen" class="screen">
            <div id="game-container"></div>
        </div>

        <div id="game-over-screen" class="screen">
            <div class="container">
                <div id="game-over-message">Game Over</div>
                <button id="play-again-button">Play Again</button>
                <button id="main-menu-button">Main Menu</button>
            </div>
        </div>

        <!-- Load Phaser, then load our game script -->
        <script src="https://cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.js"></script>
        <script src="js/game.js"></script>
        <script src="js/game_enemies.js"></script>

        <script>
          document.addEventListener('DOMContentLoaded', () => {{
            class GameUI {{
              constructor() {{
                this.startMenuScreen = document.getElementById('start-menu-screen');
                this.settingsScreen = document.getElementById('settings-screen');
                this.instructionsScreen = document.getElementById('instructions-screen');
                this.gameContainer = document.getElementById('game-screen');
                this.gameOverScreen = document.getElementById('game-over-screen');
                this.gameControls = document.getElementById('game-controls');
                this.hud = document.getElementById('hud');
              }};
              swapToScreen(screen) {{
                this.startMenuScreen.classList.remove('active');
                this.settingsScreen.classList.remove('active');
                this.instructionsScreen.classList.remove('active');
                this.gameContainer.classList.remove('active');
                this.gameOverScreen.classList.remove('active');
                screen.classList.add('active');
                if (screen.id === 'game-screen') {{
                    this.hud.style.display = 'block';
                    this.gameControls.style.display = 'block';
                }} else {{
                    this.hud.style.display = 'none';
                    this.gameControls.style.display = 'none';
                }}
              }};
              startGame() {{
                this.swapToScreen(this.gameContainer);
              }};
              endGame() {{
                this.swapToScreen(this.gameOverScreen);
              }};
              mainMenu() {{
                this.swapToScreen(this.startMenuScreen);
              }};
              playAgain() {{
                this.swapToScreen(this.gameContainer);
              }};
              settings() {{
                this.swapToScreen(this.settingsScreen);
              }};
              instructions() {{
                this.swapToScreen(this.instructionsScreen);
              }};
            }}

            class GameLogic {{
              constructor() {{}}
            }}

            class Game {{
              constructor() {{
                this.ui = new GameUI();
                this.logic = new GameLogic();
                this.lastFrameTime = 0;
                this.updateInterval = 1000 / 60;
                this.done = false;
                this.isPaused = false;
                this.animationFrameId = null;
              }}
              prepareGame() {{
                this.assignButtons();
              }}
              startGame() {{
                this.ui.startGame();
                if(this.animationFrameId) {{
                  cancelAnimationFrame(this.animationFrameId);
                }}
                this.animationFrameId = requestAnimationFrame(this.gameLoop.bind(this));
              }}
              updateGame() {{}}
              resetGame() {{
                this.isPaused = false;
                cancelAnimationFrame(this.animationFrameId);
              }}
              pause() {{
                this.isPaused = true;
                cancelAnimationFrame(this.animationFrameId);
              }}
              resume() {{
                this.isPaused = false;
                this.gameLoop();
              }}
              gameLoop(timestamp) {{
                if (this.done) return;
                const deltaTime = timestamp - this.lastFrameTime;
                if (deltaTime > this.updateInterval) {{
                  this.updateGame();
                  this.lastFrameTime = timestamp;
                }}
                if(this.animationFrameId) {{
                  cancelAnimationFrame(this.animationFrameId);
                }}
                this.animationFrameId = requestAnimationFrame(this.gameLoop.bind(this));
              }}
              assignButtons() {{
                const playButton = document.getElementById('play-button');
                const settingsButton = document.getElementById('settings-button');
                const instructionsButton = document.getElementById('instructions-button');
                const playAgainButton = document.getElementById('play-again-button');
                const mainMenuButtons = document.querySelectorAll('#main-menu-button, #settings-back-button, #instructions-back-button');
                const gameMenuButton = document.getElementById('game-menu-button');
                const gameRestartButton = document.getElementById('game-restart-button');
                const gameInstructionsButton = document.getElementById('game-instructions-button');

                playButton.addEventListener('click', this.startGame.bind(this));
                settingsButton.addEventListener('click', this.ui.settings.bind(this.ui));
                instructionsButton.addEventListener('click', this.ui.instructions.bind(this.ui));
                playAgainButton.addEventListener('click', this.startGame.bind(this));

                mainMenuButtons.forEach(button => button.addEventListener('click', () => {{
                  this.ui.swapToScreen(this.ui.startMenuScreen);
                }}));

                gameMenuButton.addEventListener('click', () => {{
                  this.ui.swapToScreen(this.ui.startMenuScreen);
                }});

                gameRestartButton.addEventListener('click', this.startGame.bind(this));

                gameInstructionsButton.addEventListener('click', () => {{
                  this.pause();
                  this.ui.swapToScreen(this.ui.instructionsScreen);
                  document.getElementById('instructions-back-button').addEventListener('click', () => {{
                    this.ui.swapToScreen(this.ui.gameContainer);
                    this.resume();
                  }}, {{ once: true }});
                }});
              }}
            }}

            const game = new Game();
            game.prepareGame();
          }});
        </script>
      </body>
    </html>
  expected_output: "A complete index.html file exactly following the above template, placed in the output folder."
  agent: html_generator

generate_game_logic:
  description: |
    Develop the game logic in JavaScript using Phaser.js. Create a file named game.js under the js folder inside the output folder.

    Use the following template. Replace the placeholders (e.g. {{{{PRELOAD_CODE}}}}, {{{{CREATE_CODE}}}}, {{{{UPDATE_CODE}}}}) with your logic for:
      - Generating a simple player sprite (circle).
      - Enabling WASD movement for the player.
      - (Optional) Additional logic you want at this basic stage.

    -----------------------------------------------------------------------
    // game.js
    // Generalized Phaser 3 template with placeholders to fill in.

    var config = {{
        type: Phaser.AUTO,
        width: 800,
        height: 600,
        parent: 'game-container',  // Must match index.html
        physics: {{
            default: 'arcade',
            arcade: {{
                debug: false
            }}
        }},
        scene: {{
            preload: preload,
            create: create,
            update: update
        }}
    }};

    var gameInstance = new Phaser.Game(config);

    function preload() {{
        // Placeholder for preload code
        {{{{PRELOAD_CODE}}}}
    }}

    function create() {{
        // Placeholder for create code
        {{{{CREATE_CODE}}}}
    }}

    function update() {{
        // Placeholder for update code
        {{{{UPDATE_CODE}}}}
    }}
    -----------------------------------------------------------------------

  expected_output: >
    A game.js file containing the Phaser.js code, following the above template and filling in the placeholders with logic for a circle player sprite and WASD movement.
  agent: game_logic_generator

generate_enemy_logic:
  description: |
    Generate a new file named game_enemies.js under the js folder inside the output folder.
    This file should:
      - Hook into the existing Phaser game (created by game.js).
      - Spawn enemies at random intervals with random positions.
      - Enemies should be code-generated shapes (e.g., squares or triangles).
      - Give them some basic movement (e.g., random or drifting around).

    You can assume that game.js is loaded first, so you have access to the global Phaser context or a shared reference to the main scene.

    Example approach:
      - Expose a function like `spawnEnemy(scene)` that creates an enemy sprite using `scene.add.graphics(...)`.
      - A loop or timer can spawn enemies every few seconds.
      - Each enemy has velocity or random movement logic in update() or via a tween/arcade physics.

  expected_output: >
    A game_enemies.js file that uses Phaser to spawn and update enemy sprites. 
  agent: enemy_logic_generator

integrate_ui_assets:
  description: >
    Organize the project directory structure so that:
      - index.html is placed in the output folder.
      - game.js is placed under the output/js folder.
      - No external audio or image assets are referenced (all assets are generated via code).
  expected_output: >
    A structured list of files and directories including output/index.html and output/js/game.js.
  agent: ui_and_assets_manager

debug_and_review:
  description: >
    Review the generated code for any errors and ensure all components work together seamlessly.
  expected_output: >
    A debug_report.txt file containing the review summary and any corrections.
  agent: debug_and_review_agent
